# -*- coding: utf-8 -*-
"""Generate_Dataset_and_Prompts.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ryt6_30ItDtn_Dqa6m4HyyyCdQXo8qlC
"""

import pandas as pd
import random
from itertools import product, combinations

# Define WHO factors (excluding num_recipients)
WHO_FACTORS = {
    "gender": ["male", "female"],
    "age": ["child", "adult", "senior"],
    "identifiability": ["named", "unnamed"],
    "relatedness": ["self", "relative", "stranger"]
    # num_recipients = random.randint(1, 300)
}

# WHAT and WHERE factors
CAUSES = ["nutritious meals", "medication", "clean water", "assault victim support"]
BRANDS = ["unnamed", "low-recognition", "high-recognition"]
LOCATIONS = [
    "North America", "South America", "Central America", "Western Europe",
    "Eastern Europe", "North Africa", "South Africa", "Central Africa",
    "East Asia", "SouthEast Asia"
]

# Generate all possible WHO attribute pairs (2-factor combinations)
who_combos = []
for (k1, k2) in combinations(WHO_FACTORS.keys(), 2):
    for v1, v2 in product(WHO_FACTORS[k1], WHO_FACTORS[k2]):
        who_combos.append({k1: v1, k2: v2})

# WHAT combinations: cause Ã— brand
what_combos = list(product(CAUSES, BRANDS))

# WHERE: 10 locations
locations = LOCATIONS

# Sample 10,000 random combinations
sampled_rows = []
while len(sampled_rows) < 10000:
    who = random.choice(who_combos)
    cause, brand = random.choice(what_combos)
    location = random.choice(locations)
    num_recipients = random.randint(1, 300)

    row = {
        **who,
        "num_recipients": num_recipients,
        "cause": cause,
        "brand": brand,
        "location": location
    }
    sampled_rows.append(row)

# Create DataFrame and save
df_sample = pd.DataFrame(sampled_rows)
########Uncomment below to Save 10000 samples to CSV ####################################
# df_sample.to_csv("charity_options_sample_10000.csv", index=False)
# print("Saved 10,000 sampled charity combinations to 'charity_options_sample_10000.csv'")

# Generate LLM-style prompts
prompts = []
for idx, row in df_sample.iterrows():
    # Extract optional WHO traits
    who_traits = []
    if 'gender' in row and pd.notna(row['gender']):
        who_traits.append(f"{row['gender']}")
    if 'age' in row and pd.notna(row['age']):
        who_traits.append(f"{row['age']}")
    if 'identifiability' in row and pd.notna(row['identifiability']):
        who_traits.append(f"{row['identifiability']}")
    if 'relatedness' in row and pd.notna(row['relatedness']):
        who_traits.append(f"{row['relatedness']}")

    # Join WHO trait description
    who_description = " ".join(who_traits).strip()

    # Compose prompt
    prompt = (
        f"You have $100 to donate.\n"
        f"Would you support a charity that provides {row['cause']} to {row['num_recipients']} "
        f"{who_description}s in {row['location']} through a {row['brand']} charity?\n"
        # f"Why or why not?"
    )

    prompts.append({
        "option_id": idx + 1,
        "prompt": prompt
    })

# Save prompts to CSV
df_prompts = pd.DataFrame(prompts)
df_prompts.to_csv("donation_options.csv", index=False)
print("Saved 10,000 LLM-readable prompts to 'donation_options.csv'")